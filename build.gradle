version '1.0-SNAPSHOT'

buildscript {

    ext {
        kotlin_version = '1.2.21'
        rome_version = "1.9.0"
        ktor_version = "0.9.1"
    }

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    }
}

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'kotlin'
apply plugin: "application"

repositories {
    jcenter()
    maven { url "http://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
}

configurations {
    ktlint
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.3'

    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.10.0'

    compile group: 'com.rometools', name: 'rome', version: rome_version
    compile group: 'com.rometools', name: 'rome-modules', version: rome_version

    compile 'com.google.apis:google-api-services-youtube:v3-rev192-1.23.0'

    compile "io.ktor:ktor-server-netty:$ktor_version"
    compile "io.ktor:ktor-html-builder:$ktor_version"
    compile "io.ktor:ktor-client-core:$ktor_version"

    compile 'com.yandex.android:disk-restapi-sdk:1.03'

    testCompile('io.kotlintest:kotlintest:2.0.7')

    ktlint "com.github.shyiko:ktlint:0.16.1"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

compileKotlin {
    kotlinOptions {
        allWarningsAsErrors = true
    }
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

mainClassName = "adeln.MainKt"

jar {
    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    manifest {
        final attrs = [
            'Implementation-Title'  : 'Foobar',
            'Implementation-Version': version,
            'Built-By'              : System.getProperty('user.name'),
            'Built-Date'            : new Date(),
            'Built-JDK'             : System.getProperty('java.version'),
            'Main-Class'            : mainClassName,
        ]
        attributes attrs
    }
}

task stage(dependsOn: "jar")
